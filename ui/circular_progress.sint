//I had some code a while back testing a circular progress bar in slint, but dropped it for the SVG, due to the lack of rounded linecaps
//I think doing it in Slint is a cleaner way, but I never had that old logic working quite right. This is a lot closer to how it should work
//and I'm adding into the repo to hold on to it, because if rounded line caps for paths are ever added I can drop the SVG and use this

import { AboutSlint, Button, VerticalBox, Palette, Slider } from "std-widgets.slint";


export component CircularProgress {
    preferred-height: 100%;
    preferred-width: 100%;
    in property <float> progress;

    rect := Rectangle {
        height: parent.height * 0.95;
        width: parent.width * 0.95;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border-color: red;
        border-width: 2px;
        border-radius: self.height * 0.5;
    }
    
    if self.progress >= 1.0: full_circ := Rectangle {
        height: parent.height;
        width: parent.width;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border-color: Palette.accent-background;
        border-width: 10px;
        border-radius: self.height * 0.5;
    }
    if self.progress < 1.0:  path := Path {
        private property <float> radius: 0.5;
        // clamp is a workaground to get filled circle by 1.0
        private property <angle> progress: clamp(root.progress * 1turn, 0, 0.99999turn);

        viewbox-width: 1;
        viewbox-height: 1;
        height: parent.height;
        width: parent.width;
        
        //where is this 3px offset coming from? if I don't put it though
        //the path ends up slight unaligned compared to the full circl rect
        x: (parent.width - self.width) / 2 + 3px;
        y: (parent.width - self.width) / 2 + 3px;

        stroke-width: 10px;
        stroke: Palette.accent-background;

        MoveTo {
            x: 0.5;
            y: 0;
        }

        ArcTo {
            radius-x: path.radius;
            radius-y: path.radius;
            x: 0.5 - path.radius * sin(-(path.progress) );
            y: 0.5 - path.radius * cos(-(path.progress) );
            sweep: root.progress > 0;
            large-arc: root.progress > 0.5;
        }
       
    }

    text := Text {
        font-size: parent.width / 4;
        color: Palette.accent-background;
        text: round(progress * 100);
    }
    Text {
        font-size: parent.width / 8;
        y: text.y + text.height - self.height - self.font-size/4;
        x: text.x + text.width;
        text: "%";
    }
}



export component Demo {
    VerticalBox {
        alignment: start;
        Text {
            text: "Hello World!";
            font-size: 24px;
            horizontal-alignment: center;
        }
       
        HorizontalLayout { alignment: center; Button { text: "OK!"; } }
        progress := CircularProgress {
            height: self.width;
            progress: slider.value * 1%;

            animate progress {
                duration: 1s;
            }
        }
        slider := Slider {
            value: 75;
            maximum: 100;
        }
    }
}
