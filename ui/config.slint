import { Theme, Settings, BoolSettTypes } from "globals.slint";
import { VerticalBox, HorizontalBox, ScrollView, TextEdit } from "std-widgets.slint";

export component CheckBox {
    callback clicked <=> ta.clicked;
    in-out property <bool> checked;

    width: self.height;

    checkbox := Rectangle {
        width: 18px;
        height: 18px;
        border-color: Theme.background-lightest;
        border-width: 2px;
        border-radius: self.width * 50%;

        animate background { duration: 150ms; }
    }

    ta := TouchArea {
        /*clicked => {
            root.checked = !root.checked;
        }*/
    }

    states [
        checked-no-hv when root.checked && !ta.has-hover : {
            checkbox.border-width: 0;
            checkbox.background: Theme.accent;
        }

        checked-hv when root.checked && ta.has-hover : {
            checkbox.border-width: 2px;
            checkbox.background: Theme.accent;
            checkbox.border-color: Theme.background-lightest;
        }

        unchecked-no-hv when !root.checked && !ta.has-hover : {
            checkbox.border-color: Theme.background-lightest;
        }

        unchecked-hv when !root.checked && ta.has-hover : {
            checkbox.border-color: Theme.accent;
        }
    ]
}


component ShortCutTag inherits HorizontalLayout {
    in property<string> label;
    out property<bool> editing;

    Rectangle {
        height: 20px;
        y: (parent.height - self.height)/2;
        width: 100px;
        border-width: root.editing ? 2px : 0px;
        border-color: Theme.background-lightest;
        border-radius: 3px;
        background: root.editing ? Theme.background : Theme.background-light;


        /*if !editing: */Text {
            text: root.label;
            font-family: "Roboto Mono";
            color: Theme.accent;

            ta := TouchArea {
                mouse-cursor: self.has-hover ? text : default;
                clicked => {
                    root.editing = ! root.editing;
                }
            }
        }

        /*if editing: edt := TextEdit {
            //this isn't really a text edit though...it just kind of looks like one
            //I think when I manually create this I'm not going to worry about
            //the cursor or copying text....I'm not really sure why you would want
            //to...honestly this seems like a strange design in Pomotroid
            //you can't really "type" into it, as your keys suddenly get chosen
            //as your shortcut, so really the cursor would only be to
            //A. Show a change to prove you are editing it
            //B. Allow you to copy and paste the text for your shortcut
        }*/

    }
}

component ConfigBar inherits Rectangle {
    in property<string> label;
    in-out property<bool> hidden: false;

    height: 44px;
    width: 321px;
    background: Theme.background;
    border-radius: 5px;

    HorizontalBox {
        Text {
            vertical-alignment: center;
            text: root.label;
            font-size: 11pt;
            color: Theme.background-lightest;
        }

        @children
    }
}

export component ConfigPage inherits Rectangle {
    background: Theme.background-light;
    //in-out property<Settings> settings;
    out property<int> active-theme: 0;
    VerticalBox {
        ScrollView {
            VerticalBox {
                Text {
                    text: "Settings";
                    horizontal-alignment: center;
                    font-size: 11pt;
                    color: Theme.foreground;
                }

                for setting[idx] in [
                    {name: "Always On Top", state: Settings.always-on-top, sett-param: BoolSettTypes.AlwOnTop},
                    {name: "Deactivate Always On Top on Breaks", state: Settings.break-always-on-top, sett-param: BoolSettTypes.BrkAlwOnTop},//only shown when "Always On Top" is selected
                    {name: "Auto-start Work Timer", state: Settings.auto-start-work-timer, sett-param: BoolSettTypes.AutoStrtWrkTim},
                    {name: "Auto-start Break Timer", state: Settings.auto-start-break-timer, sett-param: BoolSettTypes.AutoStrtBreakTim},
                    {name: "Tick Sounds - Work", state: Settings.tick-sounds, sett-param: BoolSettTypes.TickSounds},
                    {name: "Tick Sounds - Break", state: Settings.tick-sounds-during-break, sett-param: BoolSettTypes.TickSoundsBreak},
                    {name: "Desktop Notifications", state: Settings.notifications, sett-param: BoolSettTypes.Notifications},
                    {name: "Minimize to Tray", state: Settings.min-to-tray, sett-param: BoolSettTypes.MinToTray},
                    {name: "Minimize to Tray on Close", state: Settings.min-to-tray-on-close, sett-param: BoolSettTypes.MinToTryCls},
                ] : ConfigBar {
                    label: setting.name;
                    hidden: false;
                    CheckBox {
                        checked: setting.state;
                        clicked => {
                            Settings.bool-changed(setting.sett-param, self.checked);
                        }
                    }
                }

                Text {
                    text: "Global Shortcuts";
                    horizontal-alignment: center;
                    font-size: 11pt;
                    color: Theme.foreground;
                }

                for setting[idx] in [
                    {lbl: "Toggle Timer", shortcut: "Control+F1"},
                    {lbl: "Reset Timer", shortcut: "Control+F2"},
                    {lbl: "Skip Round", shortcut: "Control+F3"}
                ] : ConfigBar {
                    label: setting.lbl;
                    ShortCutTag {
                        label: setting.shortcut;
                    }
                }
            }
        }
    }
}