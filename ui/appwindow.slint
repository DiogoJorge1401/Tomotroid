import { VerticalBox , HorizontalBox, Button, ListView } from "std-widgets.slint";
import { BorderlessWindow } from "borderless-window.slint";
import { Theme, JsonTheme, Settings } from "globals.slint";
import { SlideOver } from "slidover.slint";
import { HLClick } from "hyperlink.slint";
import { ThemeCallbacks } from "themeconfig.slint";
import { Slider } from "slider.slint";
import { TimerConfig } from "timerconfig.slint";

export { HLClick, Theme, JsonTheme, Settings, ThemeCallbacks }


export enum ActiveTimer {
    focus,
    short-break,
    long-break,
}

export enum TimerAction {
    start,
    stop,
    reset,
}

export component Main inherits BorderlessWindow {
    title: "Tomotroid";
    width: 360px;
    height: 480px;

    in-out property<image> logo <=> slideover.logo;

    out property<duration> current-timer: root.tmr-config.focus-time;
    in-out property<duration> remaining-time: root.current-timer;

    in property<image> circ-progress: @image-url("../assets/ProgressCircle.svg");
    in property<[JsonTheme]> themes;
    in property<Settings> settings;

    out property<int> volume: 100;
    out property<TimerConfig> tmr-config: slideover.tmr-config;
    out property<ActiveTimer> active-timer: focus;
    out property<int> active-round: 1;
    in-out property<bool> running: false;


    callback close-window();
    callback minimize-window();
    callback move-window();

    callback action-timer(TimerAction);

    callback tick(duration);
    callback change-timer();

    close => {
        root.close-window();
    }

    minimize => {
        root.minimize-window();
    }

    move() => {
        root.move-window();
    }

    menu_toggled => {
        slideover.expanded = self.menu_open;
    }

    tick(passed-time) => {
        root.remaining-time = max(root.remaining-time - passed-time, 0);

        if (root.remaining-time == 0) {
            change-timer();
        }
    }

    change-timer => {
        if (root.active-timer == ActiveTimer.focus) {
            root.active-timer = ActiveTimer.short-break;

            root.current-timer = root.tmr-config.shbrk-time;
            root.remaining-time = root.tmr-config.shbrk-time;
        } else if (root.active-timer == ActiveTimer.short-break) {
            if (root.active-round == root.tmr-config.rounds) {
                root.active-round = 1;
                root.active-timer = ActiveTimer.long-break;

                root.current-timer = root.tmr-config.lgbrk-time;
                root.remaining-time = root.tmr-config.lgbrk-time;
            } else {
                root.active-round += 1;
                root.active-timer = ActiveTimer.focus;

                root.current-timer = root.tmr-config.focus-time;
                root.remaining-time = root.tmr-config.focus-time;
            }
        } else {
            root.active-round = 1;
            root.active-timer = ActiveTimer.focus;

            root.current-timer = root.tmr-config.focus-time;
            root.remaining-time = root.tmr-config.focus-time;
        }
    }

    function time-remaining() -> string {
        floor(root.remaining-time / 60s) + ":" + (mod(root.remaining-time, 60s)/1s < 10 ? "0" : "") + floor(mod(root.remaining-time, 60s)/1s)
    }

    function current-timer-string() -> string {
        if (root.active-timer == ActiveTimer.focus) {
            "FOCUS"
        } else if (root.active-timer == ActiveTimer.short-break) {
            "SHORT BREAK"
        } else {
            "LONG BREAK"
        }
    }

    vol_popup := PopupWindow {
        sldr := Slider {
            width: parent.width;
            height: 100%;
            value <=> root.volume;
            minimum: 0;
            maximum: 100;
            color: Theme.background-lightest;
            ft_color: Theme.background-lightest;
            ghv-color: Theme.accent;
            mt_color: Theme.background-lightest;
            vertical: true;
        }
        x: 310px;
        y: 270px;
        height: 100px;
        width: 20px;
    }

    VerticalLayout {
        states [
            vis when root.menu_open : {
                opacity: 0;
                in {
                    animate opacity {
                        duration: 100ms;
                        delay: 0ms;
                        easing: ease-in-out;
                    }
                }
            }
            not_vis when !root.menu_open: {
                opacity: 1;
                in {
                    animate opacity {
                        duration: 100ms;
                        delay: 250ms;
                        easing: ease-in-out;
                    }
                }
            }
        ]

        HorizontalLayout {
            padding-top: 60px;
            padding-left: 50px;
            padding-right: 50px;

            alignment: center;
            Rectangle {
                height: 230px;
                width: 230px;
                circ-prog := Image {
                    source: root.circ-progress;
                    width: parent.width * 0.95;
                    height: parent.height * 0.95;
                }
                Timer := Text {
                    font-family: "Roboto Mono";
                    text: root.time-remaining();
                    color: Theme.foreground;
                    font-size: 46px;
                }
                task_label := Text {
                    text: current-timer-string();
                    font-family: "Lato";
                    y: parent.height * 0.70;
                    color: Theme.foreground;
                    font-size: 12pt;
                }
            }
        }

        //In Pomotroid there is a transition between play/pause where the whole circle fades out then back in
        //I'm not sure how I can actually get this to fade out then in unless I have the play / pause as 2
        //seperate buttons, because the transition is essentially from full opactity to full opacity. Since
        //it's a boolean, either running or not...how could I add a third state in between with 0 opacity?
        //as this is cosmetic, I'll leave it alone for now, and maybe come
        //back to it later when I have a mostly functioning program.
        HorizontalLayout {
            alignment: center;
            padding: 20px;
            //opacity: 0.05;

            /*animate opacity {
                duration: 1000ms;
                //easing: ease-in-out;
            }*/

            states [
                rng when root.running : {
                    opacity: 1;
                    out {
                        animate opacity {
                            duration: 250ms;
                            easing: ease-out;
                        }
                    }
                    in {
                        animate opacity {
                            duration: 250ms;
                            easing: ease-in;
                        }
                    }
                }

                ntrng when !root.running : {
                    //opacity: 0.05;
                    opacity: 1;
                    out {
                        animate opacity {
                            duration: 250ms;
                            easing: ease-out;
                        }
                    }
                    in {
                        animate opacity {
                            duration: 250ms;
                            easing: ease-in;
                        }
                    }
                }
            ]

            Rectangle {
                border-color: Theme.foreground-darkest;
                border-width: 2px;
                border-radius: self.height*0.5;
                height: 50px;
                width: 50px;

                animate background {
                    duration: 200ms;
                    easing: ease-in-out;
                }

                StartBtn_ta := TouchArea {
                    clicked => {
                        if (root.running) {
                            root.action-timer(TimerAction.stop);
                        } else {
                            root.action-timer(TimerAction.start);
                        }
                        //root.running = !root.running;
                    }
                }

                Image {
                    source: root.running ? @image-url("../assets/icons/pause.svg") : @image-url("../assets/icons/start.svg");
                    animate colorize {
                        duration: 200ms;
                        easing: ease-in-out;
                    }

                    states [
                        hvr when StartBtn_ta.has-hover : {
                            colorize: Theme.accent;
                        }

                        nthvr when !StartBtn_ta.has-hover : {
                            colorize: Theme.foreground;
                        }
                    ]
                }

                states [
                    hvr when StartBtn_ta.has-hover : {
                        background: Theme.background.brighter(0.2);
                    }
                    nthvr when !StartBtn_ta.has-hover : {
                        background: Theme.background;
                    }
                ]
            }
        }
        HorizontalLayout {
            alignment: space-between;
            padding-top: -10px;
            padding-left: 20px;
            padding-right: 15px;
            padding-bottom: -10px;
            Text {
                font-family: "Lato";
                font-weight: 900;
                text: "\{root.active-round}/\{root.tmr-config.rounds}";
                font-size: 16px;
                color: Theme.foreground-darker;
                vertical-alignment: center;
            }
            HorizontalBox {
                min-width: 80px;
                Rectangle {
                    y: parent.height/2 - self.height/2;
                    SkipBtn_ta := TouchArea {
                    }
                    Image {
                        source: @image-url("../assets/icons/skip.svg");
                        height: 20px;
                        animate colorize {
                            duration: 250ms;
                            easing: ease-in-out;
                        }

                        states [
                            hvr when SkipBtn_ta.has-hover : {
                                colorize: Theme.accent;
                            }

                            nthvr when !SkipBtn_ta.has-hover : {
                                colorize: Theme.background_lightest;
                            }
                        ]
                    }
                }
                Rectangle {
                    y: parent.height/2 - self.height/2;
                    MuteBtn_ta := TouchArea {
                        clicked => {
                            vol_popup.show();
                        }
                    }
                    mt_img := Image {
                        height: 20px;
                        animate colorize {
                            duration: 250ms;
                            easing: ease-in-out;
                        }

                        states [
                            muted when root.volume == 0 : {
                                source: @image-url("../assets/icons/muted.svg");
                            }

                            audible when root.volume > 0 : {
                                source: @image-url("../assets/icons/mute.svg");
                            }
                        ]
                    }

                    states [
                        hvr when MuteBtn_ta.has-hover : {
                            mt-img.colorize: Theme.accent;
                        }

                        nthvr when !MuteBtn_ta.has-hover : {
                            mt_img.colorize: Theme.background_lightest;
                        }
                    ]
                }
            }
        }

        HorizontalLayout {
            padding-top: 5px;
            padding-left: 15px;
            padding-right: 15px;
            alignment: start;
            Text {
                ResetBtn_ta := TouchArea {
                    clicked => { action-timer(TimerAction.reset) }
                }
                font-weight: 900;
                text: "Reset";
                font-size: 14px;

                states [
                    hvr when ResetBtn_ta.has-hover : {
                        color: Theme.accent;
                    }

                    nthvr when !ResetBtn_ta.has-hover : {
                        color: Theme.foreground-darker;
                    }
                ]
            }
        }
    }

    slideover := SlideOver {
        x: 0px;
        y: 30px;
        width: root.width;
        height: parent.height - 68px;
        expanded: false;
    }
}
